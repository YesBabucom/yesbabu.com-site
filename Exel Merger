<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Job Application</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Firebase SDKs -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, doc, setDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Firebase configuration and initialization
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // Set log level for debugging
        setLogLevel('debug');

        let userId = null;

        // Function to handle authentication and get user ID
        const authenticateUser = async () => {
            try {
                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                } else {
                    await signInAnonymously(auth);
                }
            } catch (error) {
                console.error("Authentication Error:", error);
            }
        };

        // Listen for authentication state changes
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                userId = user.uid;
                document.getElementById('userIdDisplay').textContent = `User ID: ${userId}`;
            } else {
                console.log("User is signed out or not authenticated.");
            }
        });

        // Event listener for form submission
        const form = document.getElementById('jobApplicationForm');
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const submitBtn = document.getElementById('submitBtn');
            const loadingSpinner = document.getElementById('loadingSpinner');
            const messageBox = document.getElementById('messageBox');

            // Hide previous messages and show spinner
            messageBox.classList.add('hidden');
            loadingSpinner.classList.remove('hidden');
            submitBtn.disabled = true;

            if (!userId) {
                showMessage('Authentication not ready. Please try again in a moment.', 'error');
                loadingSpinner.classList.add('hidden');
                submitBtn.disabled = false;
                return;
            }

            // Get form data
            const formData = new FormData(form);
            const applicationData = Object.fromEntries(formData.entries());

            try {
                // Save data to Firestore
                const applicationsCollection = collection(db, 'artifacts', appId, 'users', userId, 'applications');
                await addDoc(applicationsCollection, applicationData);

                // Show success message and clear form
                showMessage('Your application has been submitted successfully!', 'success');
                form.reset();
            } catch (error) {
                console.error("Firestore Error:", error);
                showMessage(`Submission failed. Error: ${error.message}`, 'error');
            } finally {
                // Hide spinner and re-enable button
                loadingSpinner.classList.add('hidden');
                submitBtn.disabled = false;
            }
        });

        // Function to display messages
        const showMessage = (message, type) => {
            const messageBox = document.getElementById('messageBox');
            messageBox.textContent = message;
            messageBox.classList.remove('hidden', 'bg-red-100', 'text-red-700', 'bg-green-100', 'text-green-700');
            if (type === 'success') {
                messageBox.classList.add('bg-green-100', 'text-green-700');
            } else if (type === 'error') {
                messageBox.classList.add('bg-red-100', 'text-red-700');
            }
        };

        // Start the authentication process
        authenticateUser();
    </script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
        }
        .container-center {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
    </style>
</head>
<body class="bg-gray-100 container-center p-4">

    <div class="w-full max-w-lg bg-white p-8 rounded-xl shadow-lg border border-gray-200">
        <h1 class="text-3xl font-bold text-gray-800 text-center mb-2">Job Application</h1>
        <p class="text-gray-500 text-center mb-6">Fill out the form below to apply for the position.</p>

        <!-- User ID Display -->
        <div id="userIdDisplay" class="text-sm text-gray-400 text-center mb-4"></div>

        <form id="jobApplicationForm" class="space-y-6">
            <!-- Full Name -->
            <div>
                <label for="fullName" class="block text-sm font-medium text-gray-700">Full Name</label>
                <input type="text" id="fullName" name="fullName" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm p-2 border">
            </div>

            <!-- Email Address -->
            <div>
                <label for="email" class="block text-sm font-medium text-gray-700">Email Address</label>
                <input type="email" id="email" name="email" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm p-2 border">
            </div>

            <!-- Phone Number -->
            <div>
                <label for="phone" class="block text-sm font-medium text-gray-700">Phone Number</label>
                <input type="tel" id="phone" name="phone" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm p-2 border">
            </div>

            <!-- Cover Letter -->
            <div>
                <label for="coverLetter" class="block text-sm font-medium text-gray-700">Cover Letter</label>
                <textarea id="coverLetter" name="coverLetter" rows="4" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm p-2 border"></textarea>
            </div>

            <div class="flex items-center justify-between">
                <button type="submit" id="submitBtn" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300">
                    Submit Application
                </button>
            </div>

            <!-- Loading Spinner -->
            <div id="loadingSpinner" class="hidden text-center mt-4">
                <svg class="animate-spin h-6 w-6 text-blue-600 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
            </div>

            <!-- Message Box -->
            <div id="messageBox" class="hidden text-center text-sm p-3 rounded-md mt-4"></div>
        </form>
    </div>

</body>
</html>
